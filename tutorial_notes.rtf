{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww17460\viewh11560\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
PREREQUISITES\
\
Python 2.7x or 3.x\
\
pip\
	https://bootstrap.pypa.io/get-pip.py\
		Windows: Add to system path: C:\\<path_to_python>\\Scripts\
\
	run: python get-pip.py\
		for 3: python3 get-pip.py\
\
virtualenv\
	run: pip install virtualenv\
	run: virtualenv venv\
		if have both Python 2 and 3, defaults to 2.  \
		for 3: virtualenv -p python3 venv\
	run: . venv/bin/activate\
		Windows: venv\\Scripts\\activate\
\
Django\
	run: pip install django\
	run: pip install djangorestframework\
\
Django Create Project\
	run: django-admin.py/exe startproject superstore \
	run: cd superstore\
	run: django-admin.py/exe startapp inventory\
\
Quick note: \
	next steps reference python\
	for 2, use: python\
	for 3, use: python3 (unless configured differently on your system) \
\
Initial Setup\
	run: python manage.py migrate\
		creates DB file\
	run: python manage.py createsuperuser\
	run: python manage.py runserver\
	browser: http://localhost:8000\
	browser: http://localhost:8000/admin \
\
\
BUILD AN INVENTORY\
\
***START WITH QUESTIONS TO DETERMINE ITEM***\
\
***THEN BUILD IT BEFORE CHANGING OVER TO ITEM ABSTRACTION***\
\
inventory/models.py\
*************************\
class Item(models.Model):\
\
	name = models.CharField(max_length=50)\
	description = models.CharField(max_length=200)\
	current_price = models.DecimalField(decimal_places=2, max_digits=5)\
	sale_discount = models.IntegerField(default=0)\
	cost = models.DecimalField(decimal_places=2, max_digits=5)\
	active = models.BooleanField(default=False)\
\
	class Meta:\
		abstract = True\
\
class Book(Item):\
	BOOK_CHOICES = (\
		('Hardcover', 'Hardcover'),\
		('Paperback', 'Paperback')\
		)\
\
	special_description = models.CharField(max_length=15, \
		choices=BOOK_CHOICES)\
************************\
\
inventory/admin.py \
************************\
from .models import Book\
\
class InventoryAdmin(admin.ModelAdmin):\
	list_display = ['name', 'description', 'special_description',\
		'current_price', 'sale_discount', 'cost', \
		'active']\
\
\
class BookAdmin(InventoryAdmin):\
	pass\
\
admin.site.register(Book, BookAdmin)\
************************\
\
superstore/settings.py\
************************\
INSTALLED_APPS: add:\
	\'91inventory\'92,\
************************\
\
run: python manage.py makemigrations\
run: python manage.py migrate\
run: python manage.py runserver\
\
browser: http://localhost:8000/admin\
browser: add a book or a few\
\
Ooops, we forgot a quantity.  and it would be nice if we could see names and maybe a profit margin.  \
\
inventory/models.py\
************************\
Item: add:\
	quantity = models.IntegerField()\
\
	def __str__(self):\
		return self.name\
\
	def profit_margin(self):\
		return self.current_price - (self.current_price * self.sale_discount / 100) - self.cost\
************************\
\
inventory/admin.py\
************************\
InventoryAdmin: list_display: add: \
	\'91quantity\'92\
	\'91current_profit_margin\'92\
\
	def current_profit_margin(self, obj):\
		return "%.2f" % obj.profit_margin()\
************************\
\
run: python manage.py makemigrations\
	enter 1 for option 1\
	at prompt, enter 1 (this sets default quantity to 1) \
run: python manage.py migrate\
run: python manage.py runserver\
\
browser: http://localhost:8000/admin\
\
BUILD OUR OWN REST API\
\
inventory/views.py\
************************\
from .models import Book\
from django.http import HttpResponse\
import json\
\
def get_available_books(request): \
	if request.method == 'GET':\
		books = []\
\
		for book in Book.objects.filter(active=True, quantity__gt=0).order_by('name'):\
			books.append(str(book))\
\
		return HttpResponse(json.dumps(books), content_type='text/json',\
			status=200)\
	else: \
		return HttpResponse(json.dumps('Forbidden'), content_type='text/json', \
			status=403)\
************************\
\
superstore/urls.py\
************************\
from inventory import views\
\
urlpatterns: add: \
	url(r\'92^apis/books/list\'92, views.get_available_books),\
************************\
\
browser: http://localhost:8000/apis/books/list\
\
inventory/views.py\
************************\
def purchase_book(request, id):\
	if request.method == 'GET': # easy to test a GET, but should be a POST\
		book = Book.objects.get(id=id)\
\
		if book.active and book.quantity > 0: \
			# purchase it\
			book.quantity = book.quantity - 1\
			book.save()\
\
			return HttpResponse(json.dumps('Purchased'), content_type='text/json',\
				status=200)\
\
		else: \
			return HttpResponse(json.dumps('Not Available'), content_type='text/json',\
				status=404) \
\
	else:\
		return HttpResponse(json.dumps('Forbidden'), content_type='text/json',\
			status=403) \
************************\
\
superstore/urls.py\
************************\
urlpatterns: add:\
	url(r'^apis/books/purchase/(?P<id>[0-9])', views.purchase_book),\
************************\
\
browser: http://localhost:8000/apis/book/purchase/<number>\
\
DJANGO REST FRAMEWORK (referred to as DRF for simplicity) \
\
superstore/settings.py\
************************\
INSTALLED_APPS: add: before \'91inventory\'92 as a precaution and personal preference:  \
	\'91rest_framework\'92,\
\
REST_FRAMEWORK = \{\
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAdminUser',),\
    'PAGE_SIZE': 10\
\}\
************************\
\
inventory/serializers.py (create this file) \
************************\
from rest_framework import serializers\
from .models import Book\
\
class BookSerializer(serializers.HyperlinkedModelSerializer):\
	class Meta:\
		model = Book\
		fields = ('url', 'name', 'description', 'quantity', 'sale_discount', \
			'cost', 'active', 'special_description')\
************************\
\
inventory/views.py \
************************\
from rest_framework import viewsets\
from .serializers import BookSerializer\
\
class BookViewSet(viewsets.ModelViewSet):\
	queryset = Book.objects.all().order_by('name')\
	serializer_class = BookSerializer\
************************\
\
inventory/urls.py\
************************\
from django.conf.urls import include\
from rest_framework import routers\
\
router = routers.DefaultRouter()\
router.register(r'books', views.BookViewSet)\
\
urlpatterns: add:\
	url(r'^', include(router.urls)),\
    	url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\
************************\
\
browser: http://localhost:8000\
\
PLAY ON YOUR OWN and/or Q&A\
\
OPTIONAL (not included in actual source code within GitHub)\
\
PERMISSIONS FOR API (DRF)\
\
inventory/views.py\
************************\
from rest_framework.permissions import IsAdminUser\
\
BookViewSet: add: \
	permission_classes = (IsAdminUser, ) \
		OR\
	permission_classes = ( ) \
************************\
\
BUILD YOUR OWN VIEW (DRF) \
\
inventory/views.py\
************************\
from django.http import Http404\
from rest_framework.exceptions import APIException\
from rest_framework.response import Response\
from rest_framework.views import APIView\
\
class ForbiddenAccess(APIException):\
	status_code = 403\
	default_detail = \'91Action Forbidden\'92 \
\
class AvailableBookDetail(APIView):\
	\
	def get_object(self, pk): \
		try:\
			return Book.objects.get(pk=pk, active=True)\
		except Book.DoesNotExist:\
			raise Http404\
\
	def get(self, request, pk, format=None): \
		book = self.get_object(pk)\
		serializer = BookSerializer(book, context=\{\'91request\'92:request\})\
\
		return Response(serializer.data)\
\
	def put(self, request, pk, format=None): # we forbid it, but you could add your own logic to handle differently\
		raise ForbiddenAccess\
\
	def delete(self, request, pk, format=None): # we forbid it, but you could add your own logic to handle differently\
		raise Forbidden Access\
\
************************\
\
superstore/urls.py\
************************\
urlpatterns: add:\
	url(r'^available_books/(?P<pk>[0-9]+)/$', views.AvailableBookDetail.as_view()),\
************************\
\
\
browser: http://localhost:8000/available_books/<id number for a book in database table>\
example: http://localhost:8000/available_books/1\
	should be successful\
\
browser: http://localhost:8000/available_books/<id number for a book NOT in database table>\
example: http://localhost:8000/available_books/123456\
	should get 404 not found\
\
\
\
}